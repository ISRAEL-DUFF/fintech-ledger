// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	"time"

	models "github.com/ISRAEL-DUFF/fintech-ledger/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// TransactionService is an autogenerated mock type for the TransactionService type
type TransactionService struct {
	mock.Mock
}

// CreateEntry provides a mock function with given fields: ctx, entry
func (_m *TransactionService) CreateEntry(ctx context.Context, entry *models.Entry) error {
	ret := _m.Called(ctx, entry)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Entry) error); ok {
		r0 = rf(ctx, entry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetEntriesByDateRange provides a mock function with given fields: ctx, startDate, endDate, page, pageSize
func (_m *TransactionService) GetEntriesByDateRange(ctx context.Context, startDate time.Time, endDate time.Time, page int, pageSize int) ([]*models.Entry, int64, error) {
	ret := _m.Called(ctx, startDate, endDate, page, pageSize)

	var r0 []*models.Entry
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time, int, int) []*models.Entry); ok {
		r0 = rf(ctx, startDate, endDate, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Entry)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time, int, int) int64); ok {
		r1 = rf(ctx, startDate, endDate, page, pageSize)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, time.Time, time.Time, int, int) error); ok {
		r2 = rf(ctx, startDate, endDate, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetEntryByID provides a mock function with given fields: ctx, id
func (_m *TransactionService) GetEntryByID(ctx context.Context, id string) (*models.Entry, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.Entry
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Entry); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Entry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateEntry provides a mock function with given fields: ctx, entry
func (_m *TransactionService) ValidateEntry(ctx context.Context, entry *models.Entry) error {
	ret := _m.Called(ctx, entry)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Entry) error); ok {
		r0 = rf(ctx, entry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTransactionService interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactionService creates a new instance of TransactionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactionService(t mockConstructorTestingTNewTransactionService) *TransactionService {
	mock := &TransactionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
